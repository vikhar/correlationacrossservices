<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>PostSharp.Patterns.Common</name>
  </assembly>
  <members>
    <member name="T:PostSharp.Patterns.Collections.AdvisableCollection`1">
      <summary>
            A collection type similar to <see cref="T:System.Collections.ObjectModel.Collection`1" />  into which advices can be injected dynamically. 
            </summary>
      <typeparam name="T">The type of elements in the collection</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            </summary>
      <param name="collection">
            The collection whose elements should be added to the end of the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            The collection itself cannot be <c>null</c>, but it can contain elements that are <c>null</c>, if type <typeparamref name="T" /> is a reference type.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.ClearItems">
      <summary>
            Removes all elements from the underlying collection.
            </summary>
    </member>
    <member name="E:PostSharp.Patterns.Collections.AdvisableCollection`1.CollectionChanged">
      <summary>Occurs when the collection changes.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.GetCount">
      <summary>
            Gets the number of elements in the underlying collection.
            </summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            </summary>
      <returns>
            An <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator" /> for the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            </returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.GetItem(System.Int32)">
      <summary>
            Gets the element at the specified index of the underlying collection.
            </summary>
      <param name="index">The zero-based index of the element.</param>
      <returns>The element value.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.GetRange(System.Int32,System.Int32)">
      <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            </summary>
      <param name="index">The zero-based index at which the range starts.</param>
      <param name="count">The number of elements in the range.</param>
      <returns>A shallow copy of a range of elements in the source <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than 0.</para>
        <para>-or-</para>
        <para>
          <paramref name="count" /> is less than 0.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            </exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.IndexOf(`0)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.IndexOfItem(`0)">
      <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire underlying collection.
            </summary>
      <param name="item">The object to locate in the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />. The value can be <c>null</c> for reference types.</param>
      <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.InsertItem(System.Int32,`0)">
      <summary>
            Inserts an element into the underlying collection at the specified index. 
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be <c>null</c> for reference types.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.InsertItems(System.Int32,`0[])">
      <summary>
            Inserts elements into the underlying collection at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="collection" /> should be inserted.</param>
      <param name="collection">The list of objects to insert. The values in the list can be <c>null</c> for reference types.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Inserts the elements of a collection into the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which the new elements should be inserted.
            </param>
      <param name="collection">
            The collection whose elements should be inserted into the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            The collection itself cannot be <c>null</c>, but it can contain elements that are <c>null</c>, if type <typeparamref name="T" /> is a reference type.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than 0.</para>
        <para>-or-</para>
        <paramref name="index" /> is greater than <see cref="P:PostSharp.Patterns.Collections.AdvisableCollection`1.Count" /></exception>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Move(System.Int32,System.Int32)">
      <summary>
            Moved the element at the specified index to another index.
            </summary>
      <param name="oldIndex">The old zero-based index of the item to be moved.</param>
      <param name="newIndex">The new zero-based index of the item to be moved.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.MoveItem(`0,System.Int32,System.Int32)">
      <summary>
            Moves the element at the specified index to another index in the underlying collection.
            </summary>
      <param name="item">The element to be moved.</param>
      <param name="oldIndex">The old zero-based index of <paramref name="item" /> in the collection.</param>
      <param name="newIndex">The new zero-based index of <paramref name="item" /> in the collection.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.OnDeserialization(System.Object)">
      <summary>Runs when the entire object graph has been deserialized.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented. </param>
    </member>
    <member name="E:PostSharp.Patterns.Collections.AdvisableCollection`1.PropertyChanged">
      <summary>
            Event raised when the value of a property of the current object changes.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.RaiseEvents">
      <summary>
            Raised the events that have been buffered.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the underlying collection.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.RemoveItems(System.Int32,System.Int32)">
      <summary>
            Removes the specified number of elements starting at the specified index of the underlying collection.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <param name="count">The number of the elements to remove.</param>
      <returns>The list of elements that were removed.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            </summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than 0.</para>
        <para>-or-</para>
        <para>
          <paramref name="count" /> is less than 0.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            </exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.SetItem(System.Int32,`0)">
      <summary>
            Replaces the element at the specified index of the underlying collection.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. The value can be <c>null</c> for reference types.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.ToArray">
      <summary>
            Creates an array from the current <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Collections.AdvisableCollection`1.ToArray</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator">
      <summary>
            Enumerates the elements of an <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2">
      <summary>
            An implementation of a <see cref="T:System.Collections.Generic.Dictionary`2" /> into which advices can be injected dynamically. The class also allows derived classes to add new behaviors by overriding methods,
            like the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class does.
            </summary>
      <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the dictionary.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> class
            that is empty, has the default initial capacity, and uses the default equality comparer for the key type. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the default equality comparer for the key type. 
            </summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" />  whose elements are copied to the new <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" />  and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> that is empty, has the default initial capacity, and uses the specified equality comparer for the key type.
            </summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> class
            that is empty, has the specified initial capacity, and uses the default equality comparer for the key type. 
            </summary>
      <param name="capacity">The initial number of elements that the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />  can contain.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> that is empty, has a specified initial capacity, and uses the specified equality comparer for the key type.
            </summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
      <param name="capacity">The initial number of elements that the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />  can contain.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor.
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.Add(`0,`1)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.AddItem(`0,`1)">
      <summary>
            Adds an element into the underlying dictionary.
            </summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. The value can be <c>null</c> for reference types..</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only. </exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ClearItems">
      <summary>
            Removes all keys and items from the underlying dictionary.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ContainsValue(`1)">
      <summary>
            Determines whether the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> contains a specific value.
            </summary>
      <param name="value">The value to locate in the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />.
            The value can be <c>null</c> for reference types.</param>
      <returns>
        <c>true</c> if the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> contains an element with the specified value; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />.
            </summary>
      <returns>An <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator" /> structure for the current <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Item(`0)">
      <summary>Gets or sets the element with the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <returns>The element with the specified key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Keys">
      <summary>
            Gets a collection containing the keys in the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.OnDeserialization(System.Object)">
      <summary>Runs when the entire object graph has been deserialized.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented. </param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.RemoveItem(`0)">
      <summary>
            Removes the value with the specific key from the underlying dictionary.
            </summary>
      <param name="key">The key of the element to remove.</param>
      <returns>
        <c>true</c> if the element was successfully found and removed, otherwise <c>false</c>. This method returns <c>false</c> if <paramref name="key" />
            if not found in the underlying dictionary. </returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.SetItem(`0,`1,`1)">
      <summary>
            Sets the value with the specified key in the underlying dictionary.
            </summary>
      <param name="key">The key of the element to add or replace.</param>
      <param name="value">The new value to assign to the key.</param>
      <param name="oldValue">The old value assigned to <paramref name="key" />, or <c>null</c> if there is currently no value assigned to <paramref name="key" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Values">
      <summary>
            Gets a collection containing the values in the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator">
      <summary>
            Enumerates the elements of an <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection">
      <summary>
            Represents the collection of keys in an <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection" />.
            </summary>
      <returns>An <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator" /> structure for the current <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator">
      <summary>
            Enumerates the elements of a <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection">
      <summary>
            Represents the collection of values in an <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection" />.
            </summary>
      <returns>An <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator" /> structure for the current <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator">
      <summary>
            Enumerates the elements of a <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:PostSharp.Patterns.Collections.AdvisableHashSet`1">
      <summary>
            A collection type similar to <see cref="T:System.Collections.Generic.HashSet`1" />  into which advices can be injected dynamically. 
            </summary>
      <typeparam name="T">The type of elements in the collection</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Add(`0)">
      <summary>Adds an element to the current set and returns a value to indicate if the element was successfully added. </summary>
      <param name="item">The element to add to the set.</param>
      <returns>true if the element is added to the set; false if the element is already in the set.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.AddItem(`0)">
      <summary>
            Inserts an element into the underlying set.
            </summary>
      <param name="item">The object to insert. The value can be <c>null</c> for reference types.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.ChangeManyItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
      <summary>
            Modifies the underlying set by adding and removing the specified items.
            </summary>
      <param name="itemsToAdd">The objects to insert. The value can be <c>null</c> for reference types.</param>
      <param name="itemsToRemove">The objects to remove. The value can be <c>null</c> for reference types.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.ClearItems">
      <summary>
            Removes all elements from the underlying set.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableHashSet`1.Comparer">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> object that is used to determine equality for the values in the set.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.CopyTo(`0[])">
      <summary>
            Copies the elements of an <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1" /> object to an array.
            </summary>
      <param name="array">
            The one-dimensional array that is the destination of the elements copied from the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1" /> object. The array must have zero-based indexing.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <c>null</c>.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>
            Copies the specified number of elements of an <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1" /> object to an array, starting at the specified array index.
            </summary>
      <param name="array">
            The one-dimensional array that is the destination of the elements copied from the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1" /> object. The array must have zero-based indexing.
            </param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <param name="count">The number of elements to copy to <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="arrayIndex" /> is less than 0.</para>
        <para>-or-</para>
        <para>
          <paramref name="count" /> is less than 0.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="arrayIndex" /> is greater than the length of the destination <paramref name="array" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="count" /> is greater than the available space from the <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</para>
      </exception>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableHashSet`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.CreateSetComparer">
      <summary>
            Returns an <see cref="T:System.Collections.IEqualityComparer" /> object that can be used for equality testing of a <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1" /> object.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEqualityComparer" /> object that can be used for deep equality testing of the <see cref="T:System.Collections.Generic.HashSet`1" /> object.
            </returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes all elements in the specified collection from the current set.</summary>
      <param name="other">The collection of items to remove from the set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1" />.
            </summary>
      <returns>
            An <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator" /> for the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1" />.
            </returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains only elements that are also in a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a proper subset of <paramref name="other" />; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set. </param>
      <returns>true if the current set is a proper superset of <paramref name="other" />; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a set is a subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a subset of <paramref name="other" />; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a superset of <paramref name="other" />; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.OnDeserialization(System.Object)">
      <summary>Runs when the entire object graph has been deserialized.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented. </param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set overlaps with the specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.RemoveItem(`0)">
      <summary>
            Removes an element from the underlying collection.
            </summary>
      <param name="item">The object to remove. The value can be <c>null</c> for reference types.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>
            Removes all elements that match the conditions defined by the specified predicate from a <see cref="T:System.Collections.Generic.HashSet`1" /> collection.
            </summary>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.</param>
      <returns>The number of elements that were removed from the <see cref="T:System.Collections.Generic.HashSet`1" /> collection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <c>null</c>.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is equal to <paramref name="other" />; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both. </summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.TrimExcess">
      <summary>
            Sets the capacity of a <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1" /> object to the actual number of elements it contains,
            rounded up to a nearby, implementation-specific value.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains all elements that are present in the current set, in the specified collection, or in both.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="T:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator">
      <summary>
            Enumerator for the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1" /> class.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2">
      <summary>
            Provides the abstract base class for a keyed collection, similar to <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />,  into which advices can be injected dynamically. 
            </summary>
      <typeparam name="TKey">The type of keys in the collection.</typeparam>
      <typeparam name="TItem">The type of values in the collection.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2" /> class that is empty and has the default initial capacity.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2" /> class that is empty and has a specified initial capacity.
            </summary>
      <param name="capacity">The number of elements the collection can contain before it must be resized.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2" /> class that has a specified initial capacity and a given equality comparer and uses the specified equality comparer.
            </summary>
      <param name="capacity">The number of elements the collection can contain before it must be resized.</param>
      <param name="comparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" />  generic interface to use when comparing keys, or <c>null</c> to use the default equality comparer for the type of the key.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor.
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.ClearItems">
      <summary>
            Removes all elements from the underlying collection.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.Comparer">
      <summary>
            Gets the generic equality comparer that is used to determine equality of keys in the collection.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.Contains(`0)">
      <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
      <param name="item">The key to locate in the collection.</param>
      <returns>
        <c>true</c> if the collection contains an element with the specified key; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.GetKeyForItem(`1)">
      <summary>
            Extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.IndexOfItem(`1)">
      <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire underlying collection.
            </summary>
      <param name="item">The object to locate in the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />. The value can be <c>null</c> for reference types.</param>
      <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary>
            Inserts an element into the underlying collection at the specified index. 
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be <c>null</c> for reference types.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.InsertItems(System.Int32,`1[])">
      <summary>
            Inserts elements into the underlying collection at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="collection" /> should be inserted.</param>
      <param name="collection">The list of objects to insert. The values in the list can be <c>null</c> for reference types.</param>
    </member>
    <member name="P:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.Item(`0)">
      <summary>
            Gets or sets the element with the specified key. 
            </summary>
      <param name="key">The key of the element.</param>
      <returns>The element whose key is <paramref name="key" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.MoveItem(`1,System.Int32,System.Int32)">
      <summary>
            Moves the element at the specified index to another index in the underlying collection.
            </summary>
      <param name="item">The element to be moved.</param>
      <param name="oldIndex">The old zero-based index of <paramref name="item" /> in the collection.</param>
      <param name="newIndex">The new zero-based index of <paramref name="item" /> in the collection.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the underlying collection.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.RemoveItems(System.Int32,System.Int32)">
      <summary>
            Removes the specified number of elements starting at the specified index of the underlying collection.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <param name="count">The number of the elements to remove.</param>
      <returns>The list of elements that were removed.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.SetItem(System.Int32,`1)">
      <summary>
            Replaces the element at the specified index of the underlying collection.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. The value can be <c>null</c> for reference types.</param>
    </member>
    <member name="T:PostSharp.Patterns.Collections.Extensions">
      <summary>
            Adds extension methods to the <see cref="T:System.Collections.Generic.IEnumerable`1" /> and <see cref="T:System.Collections.Generic.IDictionary`2" /> interfaces.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.Extensions.ToAdvisableCollection``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> into an <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" />.
            </summary>
      <param name="collection">An <see cref="T:System.Collections.Generic.IEnumerable`1" />, or <c>null</c>.</param>
      <typeparam name="T">Type of collection items.</typeparam>
      <returns>A new <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1" /> containing all elements of <paramref name="collection" />, or <c>null</c>
            if <paramref name="collection" /> is empty.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.Extensions.ToAdvisableDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
      <summary>
            Converts an <see cref="T:System.Collections.Generic.IDictionary`2" /> into an <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />.
            </summary>
      <param name="dictionary">An <see cref="T:System.Collections.Generic.IDictionary`2" />, or <c>null</c>.</param>
      <typeparam name="TKey">Type of dictionary keys.</typeparam>
      <typeparam name="TValue">Type of dictionary values.</typeparam>
      <returns>A new <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> containing all elements of <paramref name="dictionary" />, or <c>null</c>
            if <paramref name="dictionary" /> is empty.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.Extensions.ToAdvisableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> into a <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> given a method returning the item key and a method returning the item value.
            </summary>
      <param name="collection">An <see cref="T:System.Collections.Generic.IEnumerable`1" />, or <c>null</c>.</param>
      <param name="getKeyFunc">A method returning the dictionary key given an item of the input collection.</param>
      <param name="getValueFunc">A method returning the dictionary value given an item of the input collection.</param>
      <typeparam name="TItem">Type of items in the input collection.</typeparam>
      <typeparam name="TKey">Type of keys in the output dictionary.</typeparam>
      <typeparam name="TValue">Type of values in the output dictionary.</typeparam>
      <returns>A new <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> build from items of the input <paramref name="collection" />, or <c>null</c> if <paramref name="collection" />
            is <c>null</c>.
            </returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.Extensions.ToAdvisableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1" /> into an <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1" />.
            </summary>
      <param name="collection">An <see cref="T:System.Collections.Generic.IEnumerable`1" />, or <c>null</c>.</param>
      <typeparam name="T">Type of collection items.</typeparam>
      <returns>A new <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1" /> containing all elements of <paramref name="collection" />, or <c>null</c>
            if <paramref name="collection" /> is empty.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Collections.ReadOnlyArray`1">
      <summary>
            Read-only array wrapper.
            </summary>
      <typeparam name="T">Type of array items.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.#ctor(`0[])">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Collections.ReadOnlyArray`1" />.
            </summary>
      <param name="array">An array, or <c>null</c>.</param>
    </member>
    <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.Equals(PostSharp.Patterns.Collections.ReadOnlyArray{`0})">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance. </param>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false. </returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Collections.ReadOnlyArray`1.IsNull">
      <summary>
            Determines whether the array is null.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Collections.ReadOnlyArray`1.Item(System.Int32)">
      <summary>
            Gets a specified element of the array.
            </summary>
      <param name="index">The element position.</param>
      <returns>The element at position <paramref name="index" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Collections.ReadOnlyArray`1.Length">
      <summary>
            Gets the array length.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.op_Equality(PostSharp.Patterns.Collections.ReadOnlyArray{`0},PostSharp.Patterns.Collections.ReadOnlyArray{`0})">
      <summary>
            Determines whether two instances of the <see cref="T:PostSharp.Patterns.Collections.ReadOnlyArray`1" /> type are equal.
            </summary>
      <param name="left"></param>
      <param name="right"></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Collections.ReadOnlyArray`1.op_Equality(PostSharp.Patterns.Collections.ReadOnlyArray{`0},PostSharp.Patterns.Collections.ReadOnlyArray{`0})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.op_Inequality(PostSharp.Patterns.Collections.ReadOnlyArray{`0},PostSharp.Patterns.Collections.ReadOnlyArray{`0})">
      <summary>
            Determines whether two instances of the <see cref="T:PostSharp.Patterns.Collections.ReadOnlyArray`1" /> type are different.
            </summary>
      <param name="left"></param>
      <param name="right"></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Collections.ReadOnlyArray`1.op_Inequality(PostSharp.Patterns.Collections.ReadOnlyArray{`0},PostSharp.Patterns.Collections.ReadOnlyArray{`0})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Common.Utilities.FieldValueComparer">
      <summary>
            Helper class for detecting whether field value is being changed.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(System.Boolean,``0,``0)">
      <summary>
            Detects whether field value is being changed, knowing whether field type is a struct.
            </summary>
      <param name="isValueType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isValueType</parameter>
            <parameter>M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(System.Boolean,``0,``0)</parameter>
          </include>
        </markup>
      </param>
      <param name="currentValue">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>currentValue</parameter>
            <parameter>M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(System.Boolean,``0,``0)</parameter>
          </include>
        </markup>
      </param>
      <param name="newValue">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newValue</parameter>
            <parameter>M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(System.Boolean,``0,``0)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(System.Boolean,``0,``0)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(System.Boolean,``0,``0)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(``0,``0)">
      <summary>
            Detects whether field value is being changed.
            </summary>
      <param name="currentValue">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>currentValue</parameter>
            <parameter>M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(``0,``0)</parameter>
          </include>
        </markup>
      </param>
      <param name="newValue">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>newValue</parameter>
            <parameter>M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(``0,``0)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(``0,``0)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(``0,``0)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider">
      <summary>
            Base class for contract error messages providers.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.#ctor(PostSharp.Patterns.Contracts.ContractLocalizedTextProvider)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider" />.
            </summary>
      <param name="next">The next node in the chain of responsibility.</param>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.CreditCardErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.CreditCardAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.Current">
      <summary>
            Current instance of <see cref="T:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.EmailAddressErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.EmailAddressAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.EnumDataTypeErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.EnumDataTypeAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.GetMessage(System.String)">
      <summary>
            Gets a message declared by the <see cref="T:PostSharp.Patterns.Utilities.LocalizedTextProvider" /> or the rest of responsibility chain if applicable.
            </summary>
      <param name="messageId">Identifier of the message.</param>
      <returns>Message represented by <paramref name="messageId" />.  Returning <c>null</c> is not allowed.
            </returns>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.GreaterThanErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.LessThanErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.LessThanAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.LocationContractErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.NotEmptyErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.NotEmptyAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.NotNullErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.NotNullAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.PhoneErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.PhoneAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.RangeErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.RangeAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.RegularExpressionErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.RegularExpressionAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.RequiredErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.RequiredAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StrictlyGreaterThanErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StrictlyLessThanErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StringLengthMaxErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.StringLengthAttribute" /> constraint is violated (only maximum length was specified).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StringLengthMinErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.StringLengthAttribute" /> constraint is violated (only minimum length was specified).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StringLengthRangeErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.StringLengthAttribute" /> constraint is violated (both minimum and maximum was specified).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.UrlErrorMessage">
      <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.UrlAttribute" /> constraint is violated.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.CreditCardAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException" /> if the target is assigned a value that
            is not a valid credit card number. Null strings are accepted and do not
            throw an exception.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.CreditCardAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.CreditCardAttribute" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.CreditCardAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.CreditCardAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.CreditCardAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationName</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.CreditCardAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationKind">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationKind</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.CreditCardAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.CreditCardAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.CreditCardAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.EmailAddressAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException" /> if the target is assigned a value that
            is not a valid email address. Null strings are accepted and do not
            throw an exception.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.EmailAddressAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.EmailAddressAttribute" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.EnumDataTypeAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException" /> if the target is assigned a value that
            is not a valid member of an enumeration. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.EnumDataTypeAttribute" />.
            </summary>
      <param name="enumType">Enumeration type.</param>
    </member>
    <member name="P:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.EnumType">
      <summary>
            Gets the enumeration type.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.GreaterThanAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException" /> if the target is assigned a value that
            is smaller than a given value.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.GreaterThanAttribute.#ctor(System.Double)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute" /> with a given floating-point bound.
            </summary>
      <param name="min">The lower bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.GreaterThanAttribute.#ctor(System.Int64)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute" /> with a given integer bound.
            </summary>
      <param name="min">The lower bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.GreaterThanAttribute.#ctor(System.UInt64)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute" /> with a given <see cref="T:System.UInt64" /> bound.
            </summary>
      <param name="min">The lower bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.GreaterThanAttribute.GetErrorMessage">
      <summary>
            Gets unformatted error message as defined by the instance.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.GreaterThanAttribute.GetErrorMessage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.GreaterThanAttribute.GetErrorMessageArguments">
      <summary>
            Gets values of additional arguments for error message associated with particular instance of <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute" />. 
            There arguments can be referenced from error message string by <c>{4}</c>, <c>{5}</c> and so on.
            </summary>
      <returns>An array of additional argument values.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.ILocationValidationHandler">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:PostSharp.Patterns.Contracts.ILocationValidationHandler</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.ILocationValidationHandler.Register(PostSharp.Reflection.LocationInfo,PostSharp.Patterns.Contracts.LocationContractAttribute)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.ILocationValidationHandler.Register(PostSharp.Reflection.LocationInfo,PostSharp.Patterns.Contracts.LocationContractAttribute)</parameter>
          </include>
        </markup>
      </summary>
      <param name="location">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>location</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.ILocationValidationHandler.Register(PostSharp.Reflection.LocationInfo,PostSharp.Patterns.Contracts.LocationContractAttribute)</parameter>
          </include>
        </markup>
      </param>
      <param name="contract">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>contract</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.ILocationValidationHandler.Register(PostSharp.Reflection.LocationInfo,PostSharp.Patterns.Contracts.LocationContractAttribute)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.LessThanAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException" /> if the target is assigned a value that
            is greater than a given value.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LessThanAttribute.#ctor(System.Double)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.LessThanAttribute" /> with a given floating-point bound.
            </summary>
      <param name="max">The upper bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LessThanAttribute.#ctor(System.Int64)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.LessThanAttribute" /> with a given integer bound.
            </summary>
      <param name="max">The upper bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LessThanAttribute.#ctor(System.UInt64)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.LessThanAttribute" /> with a given <see cref="T:System.UInt64" /> bound.
            </summary>
      <param name="max">The upper bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LessThanAttribute.GetErrorMessage">
      <summary>
            Gets unformatted error message as defined by the instance.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LessThanAttribute.GetErrorMessage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LessThanAttribute.GetErrorMessageArguments">
      <summary>
            Gets values of additional arguments for error message associated with particular instance of <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute" />. 
            There arguments can be referenced from error message string by <c>{4}</c>, <c>{5}</c> and so on.
            </summary>
      <returns>An array of additional argument values.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.LocationContractAttribute">
      <summary>
            Base class for other custom attributes in this namespace.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.CompileTimeValidate(PostSharp.Reflection.LocationInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.CompileTimeValidate(PostSharp.Reflection.LocationInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.CompileTimeValidate(PostSharp.Reflection.LocationInfo)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.CompileTimeValidate(PostSharp.Reflection.LocationInfo)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.CreateArgumentException(System.Object,System.String,PostSharp.Reflection.LocationKind)">
      <summary>
            Creates an <see cref="T:System.ArgumentException" /> with an error message formatted from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage" /> and
            given concrete values.
            </summary>
      <param name="value">Value assigned to the location.</param>
      <param name="locationName">Name of the location.</param>
      <param name="locationKind">Location kind.</param>
      <returns>A new <see cref="T:System.ArgumentException" /> where the message, has been derived from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage" />, with placeholders replaced by their concrete value. </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.CreateArgumentNullException(System.Object,System.String,PostSharp.Reflection.LocationKind)">
      <summary>
            Creates an <see cref="T:System.ArgumentNullException" /> with an error message formatted from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage" /> and
            given concrete values.
            </summary>
      <param name="value">Value assigned to the location.</param>
      <param name="locationName">Name of the location.</param>
      <param name="locationKind">Location kind.</param>
      <returns>A new <see cref="T:System.ArgumentNullException" /> where the message, has been derived from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage" />, with placeholders replaced by their concrete value. </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.CreateArgumentOutOfRangeException(System.Object,System.String,PostSharp.Reflection.LocationKind)">
      <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException" /> with an error message formatted from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage" /> and
            given concrete values.
            </summary>
      <param name="value">Value assigned to the location.</param>
      <param name="locationName">Name of the location.</param>
      <param name="locationKind">Location kind.</param>
      <returns>A new <see cref="T:System.ArgumentOutOfRangeException" /> where the message, has been derived from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage" />, with placeholders replaced by their concrete value. </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.CreatePostconditionFailedException(System.Object,System.String,PostSharp.Reflection.LocationKind)">
      <summary>
            Creates an <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException" /> with an error message formatted from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage" /> and
            given concrete values.
            </summary>
      <param name="value">Value assigned to the location.</param>
      <param name="locationName">Name of the location.</param>
      <param name="locationKind">Location kind.</param>
      <returns>A new <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException" /> where the message, has been derived from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage" />, with placeholders replaced by their concrete value. </returns>
    </member>
    <member name="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage">
      <summary>
            Gets or sets the error message formatting string.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.FormatErrorMessage(System.Object,System.String,PostSharp.Reflection.LocationKind)">
      <summary>
            Formats the <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage" /> with concrete values.
            </summary>
      <param name="value">Value assigned to the location.</param>
      <param name="locationName">Name of the location.</param>
      <param name="locationKind">Location kind.</param>
      <returns>A string derived from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage" />, where placeholders have been
            replaced by their concrete value.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.GetErrorMessage">
      <summary>
            Gets unformatted error message as defined by the instance.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.GetErrorMessage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.GetErrorMessageArguments">
      <summary>
            Gets values of additional arguments for error message associated with particular instance of <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute" />. 
            There arguments can be referenced from error message string by <c>{4}</c>, <c>{5}</c> and so on.
            </summary>
      <returns>An array of additional argument values.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.RuntimeInitialize(PostSharp.Reflection.LocationInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.RuntimeInitialize(PostSharp.Reflection.LocationInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="locationInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationInfo</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.RuntimeInitialize(PostSharp.Reflection.LocationInfo)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.SelectSelfOrNothing(PostSharp.Reflection.LocationInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.SelectSelfOrNothing(PostSharp.Reflection.LocationInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.SelectSelfOrNothing(PostSharp.Reflection.LocationInfo)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.SelectSelfOrNothing(PostSharp.Reflection.LocationInfo)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationName</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationKind">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationKind</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.LocationContractAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.NegativeAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException" /> if the target is assigned a value
            greater than zero.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.NegativeAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.NegativeAttribute" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.NotEmptyAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentNullException" /> if the target is assigned a null or empty value.
            The custom attributes can be added to locations of type <see cref="T:System.String" /> (where empty
            means zero characters) or <see cref="T:System.Collections.ICollection" /> (where empty means zero items). 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.NotEmptyAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.NotEmptyAttribute" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationName</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationKind">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationKind</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.NotNullAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentNullException" /> if the target is assigned a null value.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.NotNullAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:System.ArgumentNullException" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.PhoneAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException" /> if the target is assigned a value that
            is not a valid phone number. Null strings are accepted and do not
            throw an exception.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.PhoneAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.PhoneAttribute" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.PositiveAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException" /> if the target is assigned a value
            smaller than zero.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.PositiveAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.PositiveAttribute" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.PostconditionFailedException">
      <summary>
            The exception that is thrown when a postcondition contract was not fulfilled by a method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.PostconditionFailedException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.PostconditionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.PostconditionFailedException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException" /> class with a specified error message.
            </summary>
      <param name="message">Exception message.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.PostconditionFailedException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException" /> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">Exception message.</param>
      <param name="innerException">Inner exception.</param>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.RangeAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException" /> if the target is assigned a value that
            is outside a given range.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute" /> and specify a floating-point bound.
            </summary>
      <param name="min">The lower bound.</param>
      <param name="max">The upper bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.#ctor(System.Int64,System.Int64)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute" /> and specify an integer bound.
            </summary>
      <param name="min">The lower bound.</param>
      <param name="max">The upper bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.#ctor(System.UInt64,System.UInt64)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute" /> and specify a <see cref="T:System.UInt64" /> bound.
            </summary>
      <param name="min">The lower bound.</param>
      <param name="max">The upper bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.CompileTimeValidate(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RangeAttribute.CompileTimeValidate(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RangeAttribute.CompileTimeValidate(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RangeAttribute.CompileTimeValidate(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:PostSharp.Patterns.Contracts.RangeAttribute.DisplayMaxValue">
      <summary>
            Gets the maximal value to be used when generating the error message, typically in the implementation of <see cref="M:PostSharp.Patterns.Contracts.RangeAttribute.GetErrorMessageArguments" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Contracts.RangeAttribute.DisplayMinValue">
      <summary>
            Gets the minimal value to be used when generating the error message, typically in the implementation of <see cref="M:PostSharp.Patterns.Contracts.RangeAttribute.GetErrorMessageArguments" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.GetErrorMessage">
      <summary>
            Gets unformatted error message as defined by the instance.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RangeAttribute.GetErrorMessage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.GetErrorMessageArguments">
      <summary>
            Gets values of additional arguments for error message associated with particular instance of <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute" />. 
            There arguments can be referenced from error message string by <c>{4}</c>, <c>{5}</c> and so on.
            </summary>
      <returns>An array of additional argument values.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationName</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationKind">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationKind</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.RegularExpressionAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException" /> if the target is assigned a value that
            does not match a given regular expression. Null strings are accepted and do not
            throw an exception.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.RegularExpressionAttribute" />.
            </summary>
      <param name="pattern">The regular expression.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.RegularExpressionAttribute" /> and specify options.
            </summary>
      <param name="pattern">The regular expression.</param>
      <param name="options">Options.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.GetErrorMessage">
      <summary>
            Gets unformatted error message as defined by the instance.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.GetErrorMessage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.GetErrorMessageArguments">
      <summary>
            Gets values of additional arguments for error message associated with particular instance of <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute" />. 
            There arguments can be referenced from error message string by <c>{4}</c>, <c>{5}</c> and so on.
            </summary>
      <returns>An array of additional argument values.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationName</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationKind">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationKind</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.RequiredAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentNullException" /> if the target is assigned a null value or an empty or white-space string.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RequiredAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.RequiredAttribute" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.RequiredAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RequiredAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RequiredAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationName</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RequiredAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationKind">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationKind</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RequiredAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RequiredAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.RequiredAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException" /> if the target is assigned a value that
            is smaller than or equal to a given value.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.#ctor(System.Double)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute" /> with a given floating-point bound.
            </summary>
      <param name="min">The lower bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.#ctor(System.Int64)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute" /> with a given integer bound.
            </summary>
      <param name="min">The lower bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.#ctor(System.UInt64)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute" /> with a given <see cref="T:System.UInt64" /> bound.
            </summary>
      <param name="min">The lower bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.GetErrorMessage">
      <summary>
            Gets unformatted error message as defined by the instance.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.GetErrorMessage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.GetErrorMessageArguments">
      <summary>
            Gets values of additional arguments for error message associated with particular instance of <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute" />. 
            There arguments can be referenced from error message string by <c>{4}</c>, <c>{5}</c> and so on.
            </summary>
      <returns>An array of additional argument values.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException" /> if the target is assigned a value that
            is greater than or equal to a given value.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.#ctor(System.Double)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute" /> with a given floating-point bound.
            </summary>
      <param name="max">The upper bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.#ctor(System.Int64)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute" /> with a given integer bound.
            </summary>
      <param name="max">The upper bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.#ctor(System.UInt64)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute" /> with a given <see cref="T:System.UInt64" /> bound.
            </summary>
      <param name="max">The upper bound.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.GetErrorMessage">
      <summary>
            Gets unformatted error message as defined by the instance.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.GetErrorMessage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.GetErrorMessageArguments">
      <summary>
            Gets values of additional arguments for error message associated with particular instance of <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute" />. 
            There arguments can be referenced from error message string by <c>{4}</c>, <c>{5}</c> and so on.
            </summary>
      <returns>An array of additional argument values.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.StrictlyNegativeAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException" /> if the target is assigned a value
            greater than or equal to zero.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyNegativeAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyNegativeAttribute" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.StrictlyPositiveAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException" /> if the target is assigned a value
            smaller than or equal to zero.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StrictlyPositiveAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyPositiveAttribute" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.StringLengthAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException" /> if the target is assigned a string of invalid length.
            Null strings are accepted and do not throw an exception.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StringLengthAttribute.#ctor(System.Int32)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StringLengthAttribute" /> and specifies the maximum length.
            </summary>
      <param name="maximumLength">Maximum length.</param>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StringLengthAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StringLengthAttribute" /> and specifies the maximum  length
            and the minimum length.
            </summary>
      <param name="maximumLength">Maximum length.</param>
      <param name="minimumLength">Minimum length.</param>
    </member>
    <member name="P:PostSharp.Patterns.Contracts.StringLengthAttribute.MaximumLength">
      <summary>
            Gets the maximum length.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Contracts.StringLengthAttribute.MinimumLength">
      <summary>
            Gets the minimum length.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.StringLengthAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.StringLengthAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.StringLengthAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationName</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.StringLengthAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="locationKind">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>locationKind</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.StringLengthAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.StringLengthAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Contracts.StringLengthAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Contracts.UrlAttribute">
      <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException" /> if the target is assigned a value that
            is not a valid URL starting with <c>http://</c>, <c>https://</c> or <c>ftp://</c>.
             Null strings are accepted and do not
            throw an exception.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Contracts.UrlAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.UrlAttribute" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnEntry(System.Threading.Tasks.Task)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnEntry(System.Threading.Tasks.Task)</parameter>
          </include>
        </markup>
      </summary>
      <param name="task">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>task</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnEntry(System.Threading.Tasks.Task)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnExit(System.Threading.Tasks.Task)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnExit(System.Threading.Tasks.Task)</parameter>
          </include>
        </markup>
      </summary>
      <param name="task">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>task</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnExit(System.Threading.Tasks.Task)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnResume(System.Threading.Tasks.Task)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnResume(System.Threading.Tasks.Task)</parameter>
          </include>
        </markup>
      </summary>
      <param name="task">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>task</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnResume(System.Threading.Tasks.Task)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnSuspend(System.Threading.Tasks.Task)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnSuspend(System.Threading.Tasks.Task)</parameter>
          </include>
        </markup>
      </summary>
      <param name="task">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>task</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnSuspend(System.Threading.Tasks.Task)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LogActivity">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:PostSharp.Patterns.Diagnostics.LogActivity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.#ctor(PostSharp.Patterns.Diagnostics.Custom.ILogger,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.LogActivity</parameter>
          </include>
        </markup>
      </summary>
      <param name="logger">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>logger</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.#ctor(PostSharp.Patterns.Diagnostics.Custom.ILogger,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.#ctor(PostSharp.Patterns.Diagnostics.Custom.ILogger,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.Resume">
      <summary>
            Resumes the current async activity after it has been suspended by a call to <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.Suspend" />. This method is typically
            invoked after an async method is resumed, just after the <c>await</c> operator. In most cases, it is more
            convenient to use the <see cref="!:Await(Task)" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with a given <see cref="T:System.Exception" />.
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure with the default failure message.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a parameterless failure message.
            </summary>
      <param name="text">The success message.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,System.Object[])">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a failure message with an array of parameters.
            </summary>
      <param name="text">The failure message with parameters, for instance <c>Invalid file at line {Line}</c>.</param>
      <param name="args">An array of parameters.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="args">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>args</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``1(System.String,``0)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a failure message with 1 parameter.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``2(System.String,``0,``1)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a failure message with 2 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a failure message with 3 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a failure message with 4 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a failure message with 5 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a failure message with 6 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a failure message with 7 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a failure message with 8 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a failure message with 9 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with failure and specifies a failure message with 10 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <typeparam name="T10">Type of the 10-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success with the default success message.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a parameterless success message.
            </summary>
      <param name="text">The success message.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,System.Object[])">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a success message with an array of parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="args">An array of parameters.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="args">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>args</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``1(System.String,``0)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a success message with 1 parameter.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``2(System.String,``0,``1)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a success message with 2 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a success message with 3 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a success message with 4 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a success message with 5 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a success message with 6 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a success message with 7 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a success message with 8 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a success message with 9 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Ends an activity (opened with <see cref="!:OpenActivity(string)" /> or <see cref="!:OpenAsyncActivity(string)" />
            with success and specifies a success message with 10 parameters.
            </summary>
      <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <typeparam name="T10">Type of the 10-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.Suspend">
      <summary>
            Suspends the current async activity. This method is typically invoked before an async method is suspended, just before the <c>await</c> keyword.
            The activity must than be resumed by a call of the <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.Resume" /> method. In most cases, it is more
            convenient to use the <see cref="!:Await(Task)" /> method.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LogActivityKind">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:PostSharp.Patterns.Diagnostics.LogActivityKind</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogActivityKind.Default"></member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogActivityKind.TaskLauncher"></member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogActivityKind.Task"></member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogActivityKind.Wait"></member>
    <member name="T:PostSharp.Patterns.Diagnostics.LogActivityOptions">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:PostSharp.Patterns.Diagnostics.LogActivityOptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LogActivityOptions.Default">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:PostSharp.Patterns.Diagnostics.LogActivityOptions.Default</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LogActivityOptions.IsAsync">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:PostSharp.Patterns.Diagnostics.LogActivityOptions.IsAsync</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LogActivityOptions.Kind">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:PostSharp.Patterns.Diagnostics.LogActivityOptions.Kind</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Logger">
      <summary>
            Allows to emit custom log records and define custom activities.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Logger.Context">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> of the current <see cref="T:PostSharp.Patterns.Diagnostics.Logger" />, or <c>null</c> if no context is associated with the current
            <see cref="T:PostSharp.Patterns.Diagnostics.Logger" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.ForCurrentContext">
      <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> for the current logging context, i.e. for the topmost logged method or custom activity.
            </summary>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> for the current logging context.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.GetLogger(System.String)">
      <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> for a given role and for the calling type.
            </summary>
      <param name="role">The role name (see <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> for a list of standard logging roles). The default value is <c>Custom</c>.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> for <paramref name="role" /> and the calling type.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.GetLogger(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.GetLogger(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="role">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>role</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.GetLogger(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.GetLogger(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.GetLogger(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.GetLogger(System.String,System.Type)">
      <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> for a given role and <see cref="T:System.Type" />.
            </summary>
      <param name="role">The role name (see <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> for a list of standard logging roles).</param>
      <param name="type">The type that will emit the records.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> for <paramref name="role" /> and <paramref name="type" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.IsEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Determines whether logging is enabled in the current <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> for a given <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />.
            </summary>
      <param name="level">A <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />.</param>
      <returns>
        <c>true</c> if logging is enabled for <paramref name="level" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String)">
      <summary>
            Opens a custom activity with an optional description, but without parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">A description of the activity, or <c>null</c> to use the caller method name as the activity description.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[])">
      <summary>
            Opens a custom activity with an array of parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
      <param name="args">An array of parameters.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[])</parameter>
          </include>
        </markup>
      </param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="args">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>args</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0)">
      <summary>
            Opens a custom activity with a description containing 1 parameter. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1)">
      <summary>
            Opens a custom activity with a description containing 2 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2)">
      <summary>
            Opens a custom activity with a description containing 3 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3)">
      <summary>
            Opens a custom activity with a description containing 4 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4)">
      <summary>
            Opens a custom activity with a description containing 5 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5)">
      <summary>
            Opens a custom activity with a description containing 6 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6)">
      <summary>
            Opens a custom activity with a description containing 7 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Opens a custom activity with a description containing 8 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Opens a custom activity with a description containing 9 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Opens a custom activity with a description containing 10 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <typeparam name="T10">Type of the 10-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)">
      <summary>
            Opens a custom activity with an optional description, but without parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">A description of the activity, or <c>null</c> to use the caller method name as the activity description.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,System.Object[])">
      <summary>
            Opens a custom activity with an array of parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
      <param name="args">An array of parameters.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="args">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>args</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(System.String,``0)">
      <summary>
            Opens a custom activity with a description containing 1 parameter. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1)">
      <summary>
            Opens a custom activity with a description containing 2 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2)">
      <summary>
            Opens a custom activity with a description containing 3 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3)">
      <summary>
            Opens a custom activity with a description containing 4 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4)">
      <summary>
            Opens a custom activity with a description containing 5 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5)">
      <summary>
            Opens a custom activity with a description containing 6 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
      <summary>
            Opens a custom activity with a description containing 7 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Opens a custom activity with a description containing 8 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Opens a custom activity with a description containing 9 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Opens a custom activity with a description containing 10 parameters. The activity must be synchronous, i.e. must fully execute on the same thread and must not be
            interrupted by an <c>await</c> or <c>yield return</c> operator.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <typeparam name="T10">Type of the 10-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String)">
      <summary>
            Opens an asynchronous custom activity with an optional description, but without parameters. 
            </summary>
      <param name="text">A description of the activity, or <c>null</c> to use the caller method name as the activity description.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[])">
      <summary>
            Opens an asynchronous custom activity with an optional description and an array of parameters. 
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="args">An array of parameters.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[])</parameter>
          </include>
        </markup>
      </param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="args">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>args</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0)">
      <summary>
            Opens an asynchronous custom activity with a description containing 1 parameter.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1)">
      <summary>
            Opens an asynchronous custom activity with a description containing 2 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2)">
      <summary>
            Opens an asynchronous custom activity with a description containing 3 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3)">
      <summary>
            Opens an asynchronous custom activity with a description containing 4 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4)">
      <summary>
            Opens an asynchronous custom activity with a description containing 5 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5)">
      <summary>
            Opens an asynchronous custom activity with a description containing 6 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6)">
      <summary>
            Opens an asynchronous custom activity with a description containing 7 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Opens an asynchronous custom activity with a description containing 8 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Opens an asynchronous custom activity with a description containing 9 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Opens an asynchronous custom activity with a description containing 10 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <typeparam name="T10">Type of the 10-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)">
      <summary>
            Opens an asynchronous custom activity with an optional description, but without parameters. 
            </summary>
      <param name="text">A description of the activity, or <c>null</c> to use the caller method name as the activity description.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,System.Object[])">
      <summary>
            Opens an asynchronous custom activity with an optional description and an array of parameters. 
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="args">An array of parameters.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="args">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>args</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(System.String,``0)">
      <summary>
            Opens an asynchronous custom activity with a description containing 1 parameter.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1)">
      <summary>
            Opens an asynchronous custom activity with a description containing 2 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2)">
      <summary>
            Opens an asynchronous custom activity with a description containing 3 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3)">
      <summary>
            Opens an asynchronous custom activity with a description containing 4 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4)">
      <summary>
            Opens an asynchronous custom activity with a description containing 5 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5)">
      <summary>
            Opens an asynchronous custom activity with a description containing 6 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
      <summary>
            Opens an asynchronous custom activity with a description containing 7 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Opens an asynchronous custom activity with a description containing 8 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Opens an asynchronous custom activity with a description containing 9 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Opens an asynchronous custom activity with a description containing 10 parameters.
            </summary>
      <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <typeparam name="T10">Type of the 10-th parameter.</typeparam>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> representing the new activity.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String)">
      <summary>
            Writes a custom log record without parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,System.Object[])">
      <summary>
            Writes a custom log record with an array of parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode.</c>)</param>
      <param name="args">An array of parameters.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="args">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>args</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``1(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0)">
      <summary>
            Writes a custom log record with 1 parameter.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``1(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``1(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``1(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``1(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``1(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``1(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``1(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1)">
      <summary>
            Writes a custom log record with 2 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2)">
      <summary>
            Writes a custom log record with 3 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3)">
      <summary>
            Writes a custom log record with 4 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4)">
      <summary>
            Writes a custom log record with 5 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5)">
      <summary>
            Writes a custom log record with 6 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6)">
      <summary>
            Writes a custom log record with 7 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Writes a custom log record with 8 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Writes a custom log record with 9 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Writes a custom log record with 10 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <typeparam name="T10">Type of the 10-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String)">
      <summary>
            Writes a custom record without parameters and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="text">The text of the log record.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,System.Object[])">
      <summary>
            Writes a custom record with an array of parameters and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode.</c>)</param>
      <param name="args">An array of parameters.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="args">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>args</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``1(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0)">
      <summary>
            Writes a custom log record with 1 parameter and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="arg1">Value of the first parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``1(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``1(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``1(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``1(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``1(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``1(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``1(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``1(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1)">
      <summary>
            Writes a custom log record with 2 parameters and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2)">
      <summary>
            Writes a custom log record with 3 parameters and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3)">
      <summary>
            Writes a custom log record with 4 parameters and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4)">
      <summary>
            Writes a custom log record with 5 parameters and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5)">
      <summary>
            Writes a custom log record with 6 parameters and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6)">
      <summary>
            Writes a custom log record with 7 parameters and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Writes a custom log record with 8 parameters and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Writes a custom log record with 9 parameters and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Writes a custom log record with 10 parameters and associates it with an <see cref="T:System.Exception" />.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <typeparam name="T1">Type of the first parameter.</typeparam>
      <typeparam name="T2">Type of the second parameter.</typeparam>
      <typeparam name="T3">Type of the third parameter.</typeparam>
      <typeparam name="T4">Type of the 4-th parameter.</typeparam>
      <typeparam name="T5">Type of the 5-th parameter.</typeparam>
      <typeparam name="T6">Type of the 6-th parameter.</typeparam>
      <typeparam name="T7">Type of the 7-th parameter.</typeparam>
      <typeparam name="T8">Type of the 8-th parameter.</typeparam>
      <typeparam name="T9">Type of the 9-th parameter.</typeparam>
      <typeparam name="T10">Type of the 10-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="exception">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>exception</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="text">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>text</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="arg10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>arg10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T1</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T2</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T3">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T3</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T4">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T4</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T5">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T5</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T6">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T6</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T7">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T7</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T8">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T8</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T9">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T9</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T10">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T10</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteExecutionPoint">
      <summary>
            Emits a log record with the source file and line of the caller.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteExecutionPoint(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteExecutionPoint(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="callerInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>callerInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Logger.WriteExecutionPoint(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingRoles">
      <summary>
            List of standard logging roles.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Audit">
      <summary>
            Audit.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Caching">
      <summary>
            Log records emitted by the Caching component.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Custom">
      <summary>
            Default role for custom logging using the <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> class.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Meta">
      <summary>
            Logging of the logging component itself.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Tracing">
      <summary>
            Default role for the Logging component.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LogLevel">
      <summary>
            Specifies the severity of a logged message.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.None">
      <summary>
            No message should be logged.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Trace">
      <summary>
            The message should be logged at Trace level (when applicable).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Debug">
      <summary>
            The message should be logged at Debug level (when applicable).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Info">
      <summary>
            The message should be logged at Info level (when applicable).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning">
      <summary>
            The message should be logged at Warning level (when applicable).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Error">
      <summary>
            The message should be logged at Error level (when applicable).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Critical">
      <summary>
            The message should be logged at Critical level (when applicable).
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LogRecordKind">
      <summary>
            Kinds of log entry.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodEntry">
      <summary>
            Before method execution.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodSuccess">
      <summary>
            After successful method execution.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodException">
      <summary>
            After failed method execution (the method threw an exception).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.AsyncMethodAwait">
      <summary>
            Before async method suspends execution.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.AsyncMethodResume">
      <summary>
            After async method resumes execution.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.ValueChanged">
      <summary>
            When value of a field or property changes.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomRecord">
      <summary>
            Custom record (emitted by <see cref="M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String)" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomActivityEntry">
      <summary>
            Before a custom activity (emitted by <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)" /> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)" />).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomActivityException">
      <summary>
            When a custom activity fails with an exception (emitted by <see cref="!:Logger.SetException(System.Exception)" />).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomActivitySuccess">
      <summary>
            When a custom activity succeeds (emitted by <see cref="!:Logger.SetSuccess(string)" />).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomActivityFailure">
      <summary>
            When a custom activity fails with a custom message (emitted by <see cref="!:Logger.SetFailure(string)" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.IteratorYield">
      <summary>
            When an iterator yields a result.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.IteratorMoveNext">
      <summary>
            Before the <see cref="M:System.Collections.IEnumerator.MoveNext" /> method of an iterator executes.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.ExecutionPoint">
      <summary>
            Emitted by <see cref="M:PostSharp.Patterns.Diagnostics.Logger.WriteExecutionPoint" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodOvertime">
      <summary>
            After a method execution is successful but lasted more time than the threshold.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LogRecordKindExtensions">
      <summary>
            Extensions to the <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind" /> enum.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogRecordKindExtensions.IsClose(PostSharp.Patterns.Diagnostics.LogRecordKind)">
      <summary>
            Determines whether a given <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind" /> represents the closing of a context.
            </summary>
      <param name="kind">A <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind" />.</param>
      <returns>
        <c>true</c> if <paramref name="kind" /> represents the closing of a context, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogRecordKindExtensions.IsCustom(PostSharp.Patterns.Diagnostics.LogRecordKind)">
      <summary>
            Determines whether a give <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind" /> represents a custom record, emitted by the <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> class.
            </summary>
      <param name="kind">A <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind" />.</param>
      <returns>
        <c>true</c> if <paramref name="kind" /> is a custom kind of record emitted by the <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> class,
            otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogRecordKindExtensions.IsOpen(PostSharp.Patterns.Diagnostics.LogRecordKind)">
      <summary>
            Determines whether a given <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind" /> represents the opening of a context.
            </summary>
      <param name="kind">A <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind" />.</param>
      <returns>
        <c>true</c> if <paramref name="kind" /> represents the opening of a context, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogRecordKindExtensions.IsStandalone(PostSharp.Patterns.Diagnostics.LogRecordKind)">
      <summary>
            Determines whether a given <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind" /> represents a standalone record, i.e. a record that does
            not have a corresponding opening or closing. For instance, a <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomRecord" />
            is a standalone record.
            </summary>
      <param name="kind">A <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind" />.</param>
      <returns>
        <c>true</c> if <paramref name="kind" /> is a standalone record, otherwise <c>false</c>.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo">
      <summary>
            Represents information about the caller of the <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.#ctor(System.RuntimeTypeHandle,System.String,System.String,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo" />, and uses as a <see cref="T:System.RuntimeTypeHandle" /> to specify the source type.
            </summary>
      <param name="sourceTypeToken">
        <see cref="T:System.RuntimeTypeHandle" /> of the calling type.</param>
      <param name="methodName">Name of the calling method.</param>
      <param name="file">Path of the source code of the calling code.</param>
      <param name="line">Line in <paramref name="file" /> of the caller.</param>
      <param name="column">Column in <paramref name="file" /> of the caller.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.#ctor(System.Type,System.String,System.String,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo" />, and uses as a <see cref="T:System.Type" /> to specify the source type.
            </summary>
      <param name="sourceType">
        <see cref="T:System.Type" /> of the calling type.</param>
      <param name="methodName">Name of the calling method.</param>
      <param name="file">Path of the source code of the calling code.</param>
      <param name="line">Line in <paramref name="file" /> of the caller.</param>
      <param name="column">Column in <paramref name="file" /> of the caller.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.IsNull">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo" /> is null.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.MethodName">
      <summary>
            Gets the name of the caller method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.SourceLineInfo">
      <summary>
            Gets the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.SourceLineInfo" /> of the caller.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.SourceType">
      <summary>
            Gets the source <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.SourceTypeToken">
      <summary>
            Gets the <see cref="T:System.RuntimeTypeHandle" /> of the caller <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext">
      <summary>
            Defines the minimal semantics of a logging context required by the <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> class.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.IsAsync">
      <summary>
            Determines whether the context is asynchronous.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.IsDisposed">
      <summary>
            Determines whether the context is currently disposed (contexts can be recycled, therefore the
            disposed state is not the final state).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.Kind">
      <summary>
            Gets the kind of context.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.RecycleId">
      <summary>
            Gets an integer that is incremented everytime the current instance is being recycled.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind">
      <summary>
            Kinds of logging contexts.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.Thread">
      <summary>
            Thread.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.AsyncMethod">
      <summary>
            Async method.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.SyncMethod">
      <summary>
            Normal method (not async, not iterator).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.SyncCustomActivity">
      <summary>
            Synchronous custom activity.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.AsyncCustomActivity">
      <summary>
            Asynchronous custom activity.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.Ephemeral">
      <summary>
            Ephemeral (one-use context).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.Iterator">
      <summary>
            Iterator.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo">
      <summary>
            Represents a position in a file of source code.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo" />.
            </summary>
      <param name="file">Path to the source code file.</param>
      <param name="line">Line in <paramref name="file" />.</param>
      <param name="column">Column in <paramref name="file" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.Column">
      <summary>
            Gets the column in <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.File" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.File">
      <summary>
            Gets the path to the source code file.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.IsNull">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo" /> is null.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.Line">
      <summary>
            Gets the line in <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.File" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser</parameter>
          </include>
        </markup>
      </summary>
      <param name="s">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>s</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser.#ctor(System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser.GetNextParameter">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser.GetNextParameter</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser.GetNextParameter</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser.GetNextString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser.GetNextString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser.GetNextString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILogger">
      <summary>
            Abstraction of the Logging facility, through which other components emit their log records. This
            interfaces abstracts other PostSharp components from the PostSharp.Patterns.Diagnostics component.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger.CurrentContext">
      <summary>
            Gets the topmost logging context, representing either a logged method or a custom activity.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Indent(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)">
      <summary>
            Increments the indentation for a given <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" />.
            </summary>
      <param name="context">An <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> representing a custom activity created by the <see cref="!:OpenActivity(bool)" /> method.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger.IsActivityEnabled">
      <summary>
            Determines whether logging of custom activities is enabled.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.IsEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Determines whether logging is enabled for a given <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />.
            </summary>
      <param name="level">A record level (or severity).</param>
      <returns>
        <c>true</c> if logging is enabled for <paramref name="level" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions)">
      <summary>
            Opens an activity.
            </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Custom.ILogger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions)</parameter>
          </include>
        </markup>
      </param>
      <returns>An <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> representing the new activity.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger.RequiresSuspendResume">
      <summary>
            Determines whether calls of <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.SuspendActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)" /> and <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.ResumeActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)" /> 
            is required for asynchronous custom activities in the current context.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.ResumeActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)">
      <summary>
            Resumes an asynchronous activity suspended by the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.SuspendActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)" /> method.
            </summary>
      <param name="context">A context representing an asynchronous custom activity, created by <see cref="!:OpenActivity(bool)" />
            and suspended by <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.SuspendActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger.Role">
      <summary>
            Gets the role of records created by this <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger" />. A list of standard roles is available in the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.SetWaitDependency(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,System.Object)">
      <summary>
            Sets the wait dependency for a given context, i.e. give information about what the given context is waiting (or awaiting) for.
            </summary>
      <param name="context">The waiting context.</param>
      <param name="waited">The "thing" that is awaited for. Typically a <see cref="!:Task" />, or <c>TaskInfo</c>, or another context.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.SuspendActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)">
      <summary>
            Suspends an asynchronous activity, which can then be resumed by the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.ResumeActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)" /> method.
            </summary>
      <param name="context">A context representing an asynchronous custom activity, created by <see cref="!:OpenActivity(bool)" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger.Type">
      <summary>
            Gets the source <see cref="P:PostSharp.Patterns.Diagnostics.Custom.ILogger.Type" /> for which this <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger" /> was created.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Unindent(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)">
      <summary>
            Decrements the indentation for a given <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" />.
            </summary>
      <param name="context">An <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> representing a custom activity created by the <see cref="!:OpenActivity(bool)" /> method.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with a description without parameters.
            </summary>
      <param name="level">
        <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> of the record.</param>
      <param name="recordKind">Kind of record.</param>
      <param name="text">Text of the record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,System.Object[],System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with a description with an array of parameters.
            </summary>
      <param name="level">
        <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> of the record.</param>
      <param name="recordKind">Kind of record.</param>
      <param name="text">Text of the record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
      <param name="args">An array of parameters.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``1(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with 1 parameter.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="recordKind">Kind of record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
      <param name="arg1">Value of the 1 parameter.</param>
      <typeparam name="T1">Type of the 1 parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with 2 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="recordKind">Kind of record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
      <param name="arg1">Value of the 1 parameter.</param>
      <param name="arg2">Value of the 2 parameter.</param>
      <typeparam name="T1">Type of the 1 parameter.</typeparam>
      <typeparam name="T2">Type of the 2 parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with 3 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="recordKind">Kind of record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
      <param name="arg1">Value of the 1 parameter.</param>
      <param name="arg2">Value of the 2 parameter.</param>
      <param name="arg3">Value of the 3 parameter.</param>
      <typeparam name="T1">Type of the 1 parameter.</typeparam>
      <typeparam name="T2">Type of the 2 parameter.</typeparam>
      <typeparam name="T3">Type of the 3 parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with 4 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="recordKind">Kind of record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
      <param name="arg1">Value of the 1 parameter.</param>
      <param name="arg2">Value of the 2 parameter.</param>
      <param name="arg3">Value of the 3 parameter.</param>
      <param name="arg4">Value of the 4 parameter.</param>
      <typeparam name="T1">Type of the 1 parameter.</typeparam>
      <typeparam name="T2">Type of the 2 parameter.</typeparam>
      <typeparam name="T3">Type of the 3 parameter.</typeparam>
      <typeparam name="T4">Type of the 4 parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with 5 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="recordKind">Kind of record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
      <param name="arg1">Value of the 1 parameter.</param>
      <param name="arg2">Value of the 2 parameter.</param>
      <param name="arg3">Value of the 3 parameter.</param>
      <param name="arg4">Value of the 4 parameter.</param>
      <param name="arg5">Value of the 5 parameter.</param>
      <typeparam name="T1">Type of the 1 parameter.</typeparam>
      <typeparam name="T2">Type of the 2 parameter.</typeparam>
      <typeparam name="T3">Type of the 3 parameter.</typeparam>
      <typeparam name="T4">Type of the 4 parameter.</typeparam>
      <typeparam name="T5">Type of the 5 parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,``5,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with 6 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="recordKind">Kind of record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
      <param name="arg1">Value of the 1 parameter.</param>
      <param name="arg2">Value of the 2 parameter.</param>
      <param name="arg3">Value of the 3 parameter.</param>
      <param name="arg4">Value of the 4 parameter.</param>
      <param name="arg5">Value of the 5 parameter.</param>
      <param name="arg6">Value of the 6 parameter.</param>
      <typeparam name="T1">Type of the 1 parameter.</typeparam>
      <typeparam name="T2">Type of the 2 parameter.</typeparam>
      <typeparam name="T3">Type of the 3 parameter.</typeparam>
      <typeparam name="T4">Type of the 4 parameter.</typeparam>
      <typeparam name="T5">Type of the 5 parameter.</typeparam>
      <typeparam name="T6">Type of the 6 parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,``5,``6,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with 7 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="recordKind">Kind of record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
      <param name="arg1">Value of the 1 parameter.</param>
      <param name="arg2">Value of the 2 parameter.</param>
      <param name="arg3">Value of the 3 parameter.</param>
      <param name="arg4">Value of the 4 parameter.</param>
      <param name="arg5">Value of the 5 parameter.</param>
      <param name="arg6">Value of the 6 parameter.</param>
      <param name="arg7">Value of the 7 parameter.</param>
      <typeparam name="T1">Type of the 1 parameter.</typeparam>
      <typeparam name="T2">Type of the 2 parameter.</typeparam>
      <typeparam name="T3">Type of the 3 parameter.</typeparam>
      <typeparam name="T4">Type of the 4 parameter.</typeparam>
      <typeparam name="T5">Type of the 5 parameter.</typeparam>
      <typeparam name="T6">Type of the 6 parameter.</typeparam>
      <typeparam name="T7">Type of the 7 parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,``5,``6,``7,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with 8 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="recordKind">Kind of record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
      <param name="arg1">Value of the 1 parameter.</param>
      <param name="arg2">Value of the 2 parameter.</param>
      <param name="arg3">Value of the 3 parameter.</param>
      <param name="arg4">Value of the 4 parameter.</param>
      <param name="arg5">Value of the 5 parameter.</param>
      <param name="arg6">Value of the 6 parameter.</param>
      <param name="arg7">Value of the 7 parameter.</param>
      <param name="arg8">Value of the 8 parameter.</param>
      <typeparam name="T1">Type of the 1 parameter.</typeparam>
      <typeparam name="T2">Type of the 2 parameter.</typeparam>
      <typeparam name="T3">Type of the 3 parameter.</typeparam>
      <typeparam name="T4">Type of the 4 parameter.</typeparam>
      <typeparam name="T5">Type of the 5 parameter.</typeparam>
      <typeparam name="T6">Type of the 6 parameter.</typeparam>
      <typeparam name="T7">Type of the 7 parameter.</typeparam>
      <typeparam name="T8">Type of the 8 parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with 9 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="recordKind">Kind of record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
      <param name="arg1">Value of the 1 parameter.</param>
      <param name="arg2">Value of the 2 parameter.</param>
      <param name="arg3">Value of the 3 parameter.</param>
      <param name="arg4">Value of the 4 parameter.</param>
      <param name="arg5">Value of the 5 parameter.</param>
      <param name="arg6">Value of the 6 parameter.</param>
      <param name="arg7">Value of the 7 parameter.</param>
      <param name="arg8">Value of the 8 parameter.</param>
      <param name="arg9">Value of the 9 parameter.</param>
      <typeparam name="T1">Type of the 1 parameter.</typeparam>
      <typeparam name="T2">Type of the 2 parameter.</typeparam>
      <typeparam name="T3">Type of the 3 parameter.</typeparam>
      <typeparam name="T4">Type of the 4 parameter.</typeparam>
      <typeparam name="T5">Type of the 5 parameter.</typeparam>
      <typeparam name="T6">Type of the 6 parameter.</typeparam>
      <typeparam name="T7">Type of the 7 parameter.</typeparam>
      <typeparam name="T8">Type of the 8 parameter.</typeparam>
      <typeparam name="T9">Type of the 9 parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
      <summary>
            Writes a custom log record with 10 parameters.
            </summary>
      <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />).</param>
      <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
      <param name="recordKind">Kind of record.</param>
      <param name="exception">The <see cref="T:System.Exception" /> associated with the record, or <c>null</c>.</param>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> in which the record should be written, or <c>null</c>.</param>
      <param name="recordInfo">Information about the caller source code.</param>
      <param name="arg1">Value of the 1 parameter.</param>
      <param name="arg2">Value of the 2 parameter.</param>
      <param name="arg3">Value of the 3 parameter.</param>
      <param name="arg4">Value of the 4 parameter.</param>
      <param name="arg5">Value of the 5 parameter.</param>
      <param name="arg6">Value of the 6 parameter.</param>
      <param name="arg7">Value of the 7 parameter.</param>
      <param name="arg8">Value of the 8 parameter.</param>
      <param name="arg9">Value of the 9 parameter.</param>
      <param name="arg10">Value of the 10 parameter.</param>
      <typeparam name="T1">Type of the 1 parameter.</typeparam>
      <typeparam name="T2">Type of the 2 parameter.</typeparam>
      <typeparam name="T3">Type of the 3 parameter.</typeparam>
      <typeparam name="T4">Type of the 4 parameter.</typeparam>
      <typeparam name="T5">Type of the 5 parameter.</typeparam>
      <typeparam name="T6">Type of the 6 parameter.</typeparam>
      <typeparam name="T7">Type of the 7 parameter.</typeparam>
      <typeparam name="T8">Type of the 8 parameter.</typeparam>
      <typeparam name="T9">Type of the 9 parameter.</typeparam>
      <typeparam name="T10">Type of the 10 parameter.</typeparam>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory">
      <summary>
            Creates instances of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger" /> interface. An instance of this interface must be registered into the <see cref="!:ServiceLocator" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory.GetLogger(System.String,System.Type)">
      <summary>
            Gets an instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger" /> interface for a given role and <see cref="T:System.Type" />.
            </summary>
      <param name="role">The role for which the logger is requested.</param>
      <param name="type">The type of the source code that will emit the records.</param>
      <returns>An instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger" /> interface for <paramref name="role" /> and <paramref name="type" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Formatters.Formatter`1">
      <summary>
            Base implementation of the <see cref="T:PostSharp.Patterns.Formatters.IFormatter`1" /> interface.
            </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.Formatter`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Formatters.Formatter`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.Formatter`1.Attributes">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:PostSharp.Patterns.Formatters.Formatter`1.Attributes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.Formatter`1.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Object)">
      <summary>
            Appends the description of an object into given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> (weakly-typed variant).
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="value">The value to be formatted.</param>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.Formatter`1.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,`0)">
      <summary>
            Appends the description of an object into given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> (weakly-typed variant).
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="value">The value to be formatted.</param>
    </member>
    <member name="T:PostSharp.Patterns.Formatters.FormatterAttributes">
      <summary>
            Attributes of an <see cref="T:PostSharp.Patterns.Formatters.IFormatter" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Formatters.FormatterAttributes.None">
      <summary>
            Default.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Formatters.FormatterAttributes.Normal">
      <summary>
            A normal (custom) formatter.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Formatters.FormatterAttributes.Dynamic">
      <summary>
            A dynamic formatter, which resolves to another formatter according to the type of the value, not the type of the location.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Formatters.FormatterAttributes.Converter">
      <summary>
            A converter.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Formatters.FormatterAttributes.Default">
      <summary>
            A default formatter, using <see cref="M:System.Object.ToString" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Formatters.FormatterRepository`1">
      <summary>
            Allows to get and register formatters for a specific type.
            </summary>
      <typeparam name="TRole">Marker type used to differentiate FormattingServices for different purposes (e.g. caching or logging).</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Get``1">
      <summary>
            Returns the formatter for the type <typeparamref name="T" />. 
            </summary>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.FormatterRepository`1.Get``1</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.FormatterRepository`1.Get``1</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Get(System.Type)">
      <summary>
            Returns a formatter for a specific object. This overload should be used when the type of the object
            is not known at build time because the type is non-sealed.
            </summary>
      <param name="objectType">Object type.</param>
      <returns>The formatter the object <paramref name="objectType" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register``1(PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Registers the given <paramref name="formatter" /> for the type <typeparamref name="T" />.
            </summary>
      <param name="formatter">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>formatter</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register``1(PostSharp.Patterns.Formatters.IFormatter{``0})</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register``1(PostSharp.Patterns.Formatters.IFormatter{``0})</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register(System.Type,PostSharp.Patterns.Formatters.IFormatter)">
      <summary>
            Registers the given <paramref name="formatter" /> for the given <paramref name="targetType" />.
            </summary>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register(System.Type,PostSharp.Patterns.Formatters.IFormatter)</parameter>
          </include>
        </markup>
      </param>
      <param name="formatter">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>formatter</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register(System.Type,PostSharp.Patterns.Formatters.IFormatter)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register(System.Type,System.Type)">
      <summary>
            Registers the given <paramref name="formatterType" /> for the given <paramref name="targetType" />.
            </summary>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register(System.Type,System.Type)</parameter>
          </include>
        </markup>
      </param>
      <param name="formatterType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>formatterType</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register(System.Type,System.Type)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Reset">
      <summary>
            Clears formatters, but doesn't reset registrations.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.SetDynamic``1">
      <summary>
            Requests that formatters for parameters of a given type will be resolved according
            to the type of the parameter value, not to the type of the parameter itself.
            </summary>
      <typeparam name="T">Type of the parameter.</typeparam>
    </member>
    <member name="T:PostSharp.Patterns.Formatters.FormattingRole">
      <summary>
            Base for kind marker types for <see cref="T:PostSharp.Patterns.Formatters.FormatterRepository`1" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.FormattingRole.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.FormattingRole" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.FormattingRole.LoggingRole">
      <summary>
            Gets the logging role name (see <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" />).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.FormattingRole.Name">
      <summary>
            Gets the name of the <see cref="T:PostSharp.Patterns.Formatters.FormattingRole" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Formatters.IFormattable">
      <summary>
            Exposes a <see cref="M:PostSharp.Patterns.Formatters.IFormattable.Format(PostSharp.Patterns.Formatters.UnsafeStringBuilder,PostSharp.Patterns.Formatters.FormattingRole)" /> method, which allows an object to format itself into an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            Logging and caching components rely on the <see cref="T:PostSharp.Patterns.Formatters.IFormattable" /> interface.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.IFormattable.Format(PostSharp.Patterns.Formatters.UnsafeStringBuilder,PostSharp.Patterns.Formatters.FormattingRole)">
      <summary>
            Appends a description of the current object to a given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="stringBuilder">The <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> to which the object description should be written.</param>
      <param name="role">An object describing in which context the object is being formatted (e.g. caching or logging).</param>
    </member>
    <member name="T:PostSharp.Patterns.Formatters.IFormatter">
      <summary>
            Appends the description of an object into an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />. Weakly-typed variant of <see cref="T:PostSharp.Patterns.Formatters.IFormatter`1" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.IFormatter.Attributes">
      <summary>
            Gets the formatter attributes.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.IFormatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Object)">
      <summary>
            Appends the description of an object into given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> (weakly-typed variant).
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="value">The value to be formatted.</param>
    </member>
    <member name="T:PostSharp.Patterns.Formatters.IFormatter`1">
      <summary>
            Appends the description of an object into an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />. Strongly-typed variant of <see cref="T:PostSharp.Patterns.Formatters.IFormatter" />.
            </summary>
      <typeparam name="T">Type of values that can be formatted.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.IFormatter`1.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,`0)">
      <summary>
            Appends the description of an object into given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> (weakly-typed variant).
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="value">The value to be formatted.</param>
    </member>
    <member name="T:PostSharp.Patterns.Formatters.UnsafeString">
      <summary>
            A generalized representation of a string that can be either backed by a system <see cref="T:System.String" />,
            a <c>char[]</c>, or an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />. Conversions between these types happen transparently
            and are cached.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeString.#ctor(System.Char[])">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" /> backed by an array of <see cref="T:System.Char" />.
            </summary>
      <param name="array">A non-null array of <see cref="T:System.Char" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeString.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" /> backed by a <see cref="T:System.String" />.
            </summary>
      <param name="str">A non-null <see cref="T:System.String" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.UnsafeString.IsImmutable">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" /> is immutable
            or, when the value of this property is <c>false</c>, if still bound to a mutable.
            Call the <see cref="M:PostSharp.Patterns.Formatters.UnsafeString.MakeImmutable" /> method to make the <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" /> immutable.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.UnsafeString.Length">
      <summary>
            Gets the number of characters in the string.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeString.MakeImmutable">
      <summary>
            If the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" /> is bound to its origin <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />,
            evaluates the <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> and breaks the binding, so that later changes in the 
            <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> do not cause changes in the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" />.
            This method also prevents the <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" /> form being recycled.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeString.ToCharArray">
      <summary>
            Gets an <see cref="T:System.ArraySegment`1" /> representing the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" />.
            </summary>
      <returns>An <see cref="T:System.ArraySegment`1" /> representing the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeString.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder">
      <summary>
            A class similar to <see cref="T:System.Text.StringBuilder" />, but implemented using unsafe C#.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.#ctor(System.Char*,System.Int32,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> with a pre-allocated buffer/
            </summary>
      <param name="buffer">Pointer to the buffer.</param>
      <param name="size">Number of <c>char</c> in the buffer.</param>
      <param name="throwOnOverflow">
        <c>true</c> if an <see cref="T:System.OverflowException" /> should be thrown when
            the buffer capacity is insufficient, <c>false</c> if the <c>Append</c> method should return <c>false</c> without exception.</param>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.#ctor(System.Int32,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> and allocates a new buffer.
            </summary>
      <param name="capacity">The capacity of the new <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="throwOnOverflow">
        <c>true</c> if an <see cref="T:System.OverflowException" /> should be thrown when
            the buffer capacity is insufficient, <c>false</c> if the <c>Append</c> method should return <c>false</c> without exception.</param>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(PostSharp.Patterns.Formatters.UnsafeString)">
      <summary>
            Appends an <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" /> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="s">A non-null <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" />.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(PostSharp.Patterns.Formatters.UnsafeStringBuilder)">
      <summary>
            Appends the current value of a <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="stringBuilder">A <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Boolean)">
      <summary>
            Appends a <see cref="T:System.Boolean" /> (<c>true</c> or <c>false</c>, litterally) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="value">The value to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Byte)">
      <summary>
            Appends a <see cref="T:System.Byte" /> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="value">The value to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char)">
      <summary>
            Appends one <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="c">A <c>char</c>.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char*,System.Int32)">
      <summary>
            Appends an unmanaged array of <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="c">A non-null pointer to an unmanaged array of <c>char</c>.</param>
      <param name="count">Number of <c>char</c> to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char,System.Char)">
      <summary>
            Appends two <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="c1">A <c>char</c>.</param>
      <param name="c2">A <c>char</c>.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char,System.Char,System.Char)">
      <summary>
            Appends three <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="c1">A <c>char</c>.</param>
      <param name="c2">A <c>char</c>.</param>
      <param name="c3">A <c>char</c>.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char,System.Char,System.Char,System.Char)">
      <summary>
            Appends four <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="c1">A <c>char</c>.</param>
      <param name="c2">A <c>char</c>.</param>
      <param name="c3">A <c>char</c>.</param>
      <param name="c4">A <c>char</c>.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char,System.Char,System.Char,System.Char,System.Char)">
      <summary>
            Appends five <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="c1">A <c>char</c>.</param>
      <param name="c2">A <c>char</c>.</param>
      <param name="c3">A <c>char</c>.</param>
      <param name="c4">A <c>char</c>.</param>
      <param name="c5">A <c>char</c>.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char,System.Int32)">
      <summary>
            Appends several times the same <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="c">A <c>char</c>.</param>
      <param name="count">The number of times <paramref name="c" /> has to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char[])">
      <summary>
            Appends an array of <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="c">A non-null array of <c>char</c>.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>
            Appends an array segment of <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="c">A non-null array of <c>char</c>.</param>
      <param name="offset">Index of the first <c>char</c> to be appended.</param>
      <param name="count">Number of <c>char</c> to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Int16)">
      <summary>
            Appends a <see cref="T:System.Int16" /> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="value">The value to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Int32)">
      <summary>
            Appends a <see cref="T:System.Int32" /> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="value">The value to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Int64)">
      <summary>
            Appends a <see cref="T:System.Int64" /> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="value">The value to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.SByte)">
      <summary>
            Appends an <see cref="T:System.SByte" /> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="value">The value to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.String)">
      <summary>
            Appends a <see cref="T:System.String" /> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="s">A non-null <see cref="T:System.String" />.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.UInt16)">
      <summary>
            Appends a <see cref="T:System.UInt16" /> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="value">The value to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.UInt32)">
      <summary>
            Appends a <see cref="T:System.UInt32" /> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="value">The value to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.UInt64)">
      <summary>
            Appends a <see cref="T:System.UInt64" /> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="value">The value to be appended.</param>
      <returns>
        <c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Buffer">
      <summary>
            Gets a pointer to the unmanaged buffer of the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Capacity">
      <summary>
            Gets the capacity (number of <c>char</c>) of the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Clear">
      <summary>
            Clears the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> so it can be reused to build a new string.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Finalize">
      <summary>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.IsDisposed">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> has been disposed.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Item(System.Int32)">
      <summary>
            Gets the <c>char</c> at a given position in the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="index">Index of the <c>char</c> in the buffer.</param>
      <returns>The <c>char</c> at position <paramref name="index" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Length">
      <summary>
            Gets the current number of characters in the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.SetNullTermination">
      <summary>
            Appends a null character at the end of the current string, without affecting the string length.
            In case of overflow, if <see cref="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.ThrowOnOverflow" /> is <c>false</c>, the last character of the string is removed
            and the string lenght is decreased by 1.
            </summary>
      <returns>
        <c>true</c> if the string was null-terminated without affecting its length, or <c>false</c> if the last character of the string was replaced by the null character
            and the string length was decreased by 1.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Substring(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Substring(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="startIndex">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>startIndex</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Substring(System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Substring(System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Substring(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Substring(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="startIndex">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>startIndex</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Substring(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="length">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>length</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Substring(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Substring(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.ThrowOnOverflow">
      <summary>
        <c>true</c> if an <see cref="T:System.OverflowException" /> should be thrown when
            the buffer capacity is insufficient, <c>false</c> if the <c>Append</c> method should return <c>false</c> without exception.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.ToUnsafeString">
      <summary>
            Gets an <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" /> that provides read-only access to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <returns>An <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" /> that provides read-only access to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Version">
      <summary>
            Gets the version of the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />. This property is incremented every time
            the current object is reused, more specifically, when the <see cref="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Clear" /> method is called.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool">
      <summary>
            A thread-safe pool of <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool.#ctor(System.Int32,System.Boolean,System.Int32)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool" />.
            </summary>
      <param name="stringBuilderCapacity">Maximal number of characters in the <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> in the pool.</param>
      <param name="throwOnOverflow">
        <c>true</c> if an <see cref="T:System.OverflowException" /> should be thrown when
            the buffer capacity is insufficient, <c>false</c> if the <c>Append</c> method should return <c>false</c> without exception.</param>
      <param name="maxInstances">Maximal number of instances in the pool. The default value is 32.</param>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool.GetInstance">
      <summary>
            Gets an instance from the pool.
            </summary>
      <returns>An <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool.ReturnInstance(PostSharp.Patterns.Formatters.UnsafeStringBuilder)">
      <summary>
            Returns an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> to the pool.
            </summary>
      <param name="stringBuilder">An <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> that has compatible values of the <see cref="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Capacity" />
            and <see cref="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.ThrowOnOverflow" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool.StringBuilderCapacity">
      <summary>
            Gets the maximum number of characters in instances of the <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> class managed by the current pool.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Model.DynamicallyAdvisableObject">
      <summary>
            Base class for objects into which advices can be dynamically injected. This class is not meant to be used in user code.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Model.DynamicallyAdvisableObject.ExecuteWithAdvices``2(PostSharp.Patterns.Model.ObjectAccessLevel,``1@)">
      <summary>
            Executes an action wrapped by all custom advices added to the current object.
            </summary>
      <param name="objectAccessLevel">Required access level when executing <paramref name="action" />.</param>
      <param name="action">The action to be executed.</param>
      <typeparam name="TResult">Type of return value.</typeparam>
      <typeparam name="TAction">Action type.</typeparam>
      <returns>The return value of <paramref name="action" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Model.DynamicallyAdvisableObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:PostSharp.Patterns.Model.DynamicallyAdvisableObject.OnDeserialization(System.Object)">
      <summary>Runs when the entire object graph has been deserialized.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented. </param>
    </member>
    <member name="T:PostSharp.Patterns.Model.IDynamicInterfaceImplementation">
      <summary>
            Interface that must be implemented by objects implementing dynamic interfaces, which can be queried using <see cref="M:PostSharp.Patterns.Model.IQueryInterface.QueryInterface``1" />.
            The <see cref="T:PostSharp.Patterns.Model.IDynamicInterfaceImplementation" /> interface provides a mean to get a reference back to the principal object.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Model.IDynamicInterfaceImplementation.PrincipalObject">
      <summary>
            Gets the principal object for which the current object is an indirect interface implementation.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Model.IInvocable`1">
      <summary>
            Exposes an <see cref="M:PostSharp.Patterns.Model.IInvocable`1.Invoke" /> method.
            </summary>
      <typeparam name="TResult">Return type of the <see cref="M:PostSharp.Patterns.Model.IInvocable`1.Invoke" /> method.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Model.IInvocable`1.Invoke">
      <summary>
            Invokes the action.
            </summary>
      <returns>Anything.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Model.IQueryInterface">
      <summary>
            Interface implemented by objects that can implement interface dynamically by composition, without
            implementing the interface directly at MSIL level. The <see cref="M:PostSharp.Patterns.Model.IQueryInterface.QueryInterface``1" /> method
            must then be used instead of a normal cast.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Model.IQueryInterface.QueryInterface``1">
      <summary>
            Gets the implementation of a specified interface for the current object.
            </summary>
      <typeparam name="T">The type of the required interface.</typeparam>
      <returns>An object implementing the <typeparamref name="T" /> interface on behalf of the current object, or <c>null</c>
            if the current object does not implement the <typeparamref name="T" /> interface.
            </returns>
    </member>
    <member name="T:PostSharp.Patterns.Model.ObjectAccessLevel">
      <summary>
            Enumeration of access levels that methods of execution scopes can require on an object.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Unknown">
      <summary>
            The required access level is unknown; maximal access is required.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Read">
      <summary>
            Read-only.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Write">
      <summary>
            Read-write.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.UpgradeableRead">
      <summary>
            Read-only access that prevents other threads from acquiring <see cref="F:PostSharp.Patterns.Model.ObjectAccessLevel.Write" /> or <see cref="F:PostSharp.Patterns.Model.ObjectAccessLevel.UpgradeableRead" /> access.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Unchecked">
      <summary>
            Disables all runtime verification of access permissions.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Yield">
      <summary>
            Indicates that the control flow is passed to another object.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Inherit">
      <summary>
            Indicates that the access level is inherited from the outer scope.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Model.QueryInterfaceExtensions">
      <summary>
            Provides methods to aid with the use of dynamic interfaces.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Model.QueryInterfaceExtensions.QueryInterface``1(System.Object,System.Boolean)">
      <summary>
            Gets the implementation of a specified interface for the specified object.
            </summary>
      <param name="obj">The object for which the interface should be queried.</param>
      <param name="throwing">
        <c>true</c> if the method should throw a <see cref="T:System.InvalidCastException" /> if <paramref name="obj" /> does not implement the
            <typeparamref name="T" /> interface, <c>false</c> if <c>null</c> be returned instead. The default value is <c>true</c>.</param>
      <typeparam name="T">The type of the required interface.</typeparam>
      <returns>An object implementing the <typeparamref name="T" /> interface on behalf of <paramref name="obj" />, or <c>null</c>
            if <paramref name="obj" /> does not implement <typeparamref name="T" /> and <paramref name="throwing" /> is <c>true</c>.
            </returns>
    </member>
    <member name="T:PostSharp.Patterns.Threading.AssumeImmutableAttribute">
      <summary>
            Custom attribute that, when applied to a targetType, means that targetType should be assumed to be immutable.
            The custom attribute can be applied to a type on assembly level by specifying the <see cref="T:System.Type" /> property using
            the <see cref="M:PostSharp.Patterns.Threading.AssumeImmutableAttribute.#ctor(System.Type)" /> constructor.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.AssumeImmutableAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Threading.AssumeImmutableAttribute" /> custom attribute that can be applied to a specific targetType.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.AssumeImmutableAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Threading.AssumeImmutableAttribute" /> custom attribute that can be applied to an assembly,
            passing the immutable as a constructor argument. This constructor allows to add assumptions for types that are not defined
            in this current assembly.
            </summary>
      <param name="targetType">The immutable targetType.</param>
    </member>
    <member name="P:PostSharp.Patterns.Threading.AssumeImmutableAttribute.TargetType">
      <summary>
            Gets the targetType that should be assumed immutable, if the <see cref="M:PostSharp.Patterns.Threading.AssumeImmutableAttribute.#ctor(System.Type)" /> constructor was used.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter">
      <summary>
            An awaiter for the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccessAsync(PostSharp.Patterns.Model.ObjectAccessLevel)" /> method. The struct implements both the Awaiter and Awaitable contracts.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter.GetAwaiter">
      <summary>
            Gets the Awaiter from the Awaitable. This method is a part of the Awaitable contract.
            </summary>
      <returns>The current object.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter.GetResult">
      <summary>
            Gets the result of the async method. This method is a part of the Awaiter contract.
            </summary>
      <returns>The result of the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccessAsync(PostSharp.Patterns.Model.ObjectAccessLevel)" /> method.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter.IsCompleted">
      <summary>
            Determines whether the operation has already completed.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter.OnCompleted(System.Action)">
      <summary>Schedules the continuation action that's invoked when the instance completes.</summary>
      <param name="continuation">The action to invoke when the operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation" /> argument is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action that's invoked when the instance completes.</summary>
      <param name="continuation">The action to invoke when the operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation" /> argument is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ConcurrentAccessToken">
      <summary>
            Token returned by the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccess(PostSharp.Patterns.Model.ObjectAccessLevel,PostSharp.Patterns.Threading.ConcurrentAccessToken@)" /> method. This token is intended to be used in a <c>using</c> block.
            Consumers of this method must call <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Complete" /> on success,  and <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Dispose" /> on exception.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Cancel">
      <summary>
            Indicates that the operation requiring access on an object failed.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.CheckContext(System.Boolean)">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken" /> is valid in the current context.
            </summary>
      <param name="canBeParentContext">
        <c>true</c> if the current <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken" /> can be the token of a parent token,
            <c>false</c> if it must be the token of the current context.</param>
      <returns>
        <c>true</c> if the current <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken" /> is valid for the current context, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Complete">
      <summary>
            Indicates that the operation requiring access on an object has successfully completed.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Dispose">
      <summary>
            Indicates that the operation requiring access on an object has completed. If the <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Complete" /> method is
            not invoked before the <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Dispose" /> method, the transaction is considered to have failed. Current threading
            models do not support transactions and therefore this semantic is currently unused, but it may be used in the future.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ConcurrentAccessToken.Null">
      <summary>
            Gets a null instance of the <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken" /> type.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.IConcurrencyController">
      <summary>
            Controls access to an entity from possibly several threads.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccess(PostSharp.Patterns.Model.ObjectAccessLevel,PostSharp.Patterns.Threading.ConcurrentAccessToken@)">
      <summary>
            Acquires access on the entity for the current thread and waits synchronously if access cannot be immediately acquired.
            </summary>
      <param name="objectAccessLevel">The required access level on the entity.</param>
      <param name="concurrencyAccessToken">An opaque <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken" />, typically used in a <c>using</c> block. Consumers must invoke the <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Complete" />
            method upon success before exiting the <c>using</c> block.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccessAsync(PostSharp.Patterns.Model.ObjectAccessLevel)">
      <summary>
            Asynchronously acquires access on the entity for the current thread and returns an async awaiter.
            </summary>
      <param name="objectAccessLevel">The required access level on the entity.</param>
      <returns>a <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter" /> compatible with the <c>await</c> keyword, and evaluating to an opaque <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken" /> typically used in a <c>using</c> block. 
            Consumers must invoke the <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Complete" />
            method upon success before exiting the <c>using</c> block.
            </returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.IConcurrencyController.CheckAccess(PostSharp.Patterns.Model.ObjectAccessLevel)">
      <summary>
            Determines whether the current thread has a specified level of access to the entity.
            </summary>
      <param name="objectAccessLevel">The required access level on the entity.</param>
      <returns>
        <c>true</c> if the current thread has the required level of access, otherwise <c>false</c>.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Threading.IConcurrencyController.IsReadOnly">
      <summary>
            Determines whether the entity is currently read-only.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.IConcurrencyController.IsSharable">
      <summary>
            Determines whether the entity can currently be accessed concurrently by several threads.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.IConcurrencyController.RequireAccess(PostSharp.Patterns.Model.ObjectAccessLevel)">
      <summary>
            Determines whether the current thread has a specified level of access to the entity and throws an exception if not.
            </summary>
      <param name="objectAccessLevel">The required access level on the entity.</param>
    </member>
    <member name="P:PostSharp.Patterns.Threading.IConcurrencyController.ThreadingModel">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Threading.ThreadingModel" /> implemented by the current controller.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.IThreadAware">
      <summary>
            Interface implemented by objects that are aware of concurrency. Access to thread-aware objects is controlled by a concurrency controller (<see cref="T:PostSharp.Patterns.Threading.IConcurrencyController" />).
            Any aspect implementing a threading model (<c>ThreadAwareObjectAttribute</c>) introduces this interface to the target class and ensures that accesses to this class go through
            the controller.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.IThreadAware.ConcurrencyController">
      <summary>
            Gets the concurrency controller for the current object.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.IThreadAware.OnParentControllerChanged(PostSharp.Patterns.Threading.IConcurrencyController)">
      <summary>
            Notifies the object that the effective controller of it's parent has changed.
            <param name="parentController">The new parent controller or <c>null</c>.</param></summary>
      <param name="parentController">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>parentController</parameter>
            <parameter>M:PostSharp.Patterns.Threading.IThreadAware.OnParentControllerChanged(PostSharp.Patterns.Threading.IConcurrencyController)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadAwareExtensions">
      <summary>
            Provides extension methods to the <see cref="T:PostSharp.Patterns.Threading.IThreadAware" /> interface.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAwareExtensions.AcquireAccess(PostSharp.Patterns.Threading.IThreadAware,PostSharp.Patterns.Model.ObjectAccessLevel)">
      <summary>
            Acquires access to given object and returns the <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken" />.
            </summary>
      <param name="instance">The instance for which access is required.</param>
      <param name="objectAccessLevel">The level of access required.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken" /> that should be disposed when access is no longer required.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAwareExtensions.AcquireAccess(PostSharp.Patterns.Threading.IThreadAware,PostSharp.Patterns.Model.ObjectAccessLevel,PostSharp.Patterns.Threading.ConcurrentAccessToken@)">
      <summary>
            Acquires access for a given object and gets the <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken" /> as a reference parameter.
            </summary>
      <param name="instance">The instance for which access is required.</param>
      <param name="objectAccessLevel">The level of access required.</param>
      <param name="concurrentAccessToken">At output, a <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken" /> that should be disposed when access is no longer required.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAwareExtensions.AcquireAccessAsync(PostSharp.Patterns.Threading.IThreadAware,PostSharp.Patterns.Model.ObjectAccessLevel)">
      <summary>
            Asynchronously acquires access for a given object.
            </summary>
      <param name="instance">The instance for which access is required.</param>
      <param name="objectAccessLevel">The level of access required.</param>
      <returns>An <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter" /> object that can be used for awaiting for access.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadingException">
      <summary>
            Base class for exceptions thrown by the <c>PostSharp.Patterns.Threading</c> component.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadingModel">
      <summary>
            Base class for all threading models. Defines properties that describe the characteristics of threading models. All classes derived from <see cref="T:PostSharp.Patterns.Threading.ThreadingModel" />
            are necessarily singletons.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ThreadingModel.IsThreadSafe">
      <summary>
            Determines whether the threading model is possibly thread safe.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadingModel.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadingPatternsAspectRoles">
      <summary>
            Enumerates the aspect roles (for use with <see cref="T:PostSharp.Aspects.Dependencies.AspectRoleDependencyAttribute" />)
             used by the <c>PostSharp.Patterns.Threading</c> component.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Threading.ThreadingPatternsAspectRoles.ThreadingModel">
      <summary>
            Role of an aspect that provides a threading model.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Utilities.LocalizedTextProvider">
      <summary>
            Base class for providers of error messages. Implements chain of responsibility between multiple providers.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Utilities.LocalizedTextProvider.#ctor(PostSharp.Patterns.Utilities.LocalizedTextProvider)">
      <summary>
            Initializes a new instance of <see cref="T:PostSharp.Patterns.Utilities.LocalizedTextProvider" /> class.
            </summary>
      <param name="next">Next <see cref="T:PostSharp.Patterns.Utilities.LocalizedTextProvider" /> in the responsibility chain.</param>
    </member>
    <member name="M:PostSharp.Patterns.Utilities.LocalizedTextProvider.FormatString(System.String,System.Object[])">
      <summary>
            Formats a string. An implementation would typically invoke <see cref="M:System.String.Format(System.String,System.Object[])" />.
            </summary>
      <param name="format">Formatting string. Typically (but not necessarily) the string returned by <see cref="M:PostSharp.Patterns.Utilities.LocalizedTextProvider.GetMessage(System.String)" />.</param>
      <param name="arguments">Arguments.</param>
      <returns>The formatted string.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Utilities.LocalizedTextProvider.GetMessage(System.String)">
      <summary>
            Gets a message declared by the <see cref="T:PostSharp.Patterns.Utilities.LocalizedTextProvider" /> or the rest of responsibility chain if applicable.
            </summary>
      <param name="messageId">Identifier of the message.</param>
      <returns>Message represented by <paramref name="messageId" />.  Returning <c>null</c> is not allowed.
            </returns>
    </member>
    <member name="T:PostSharp.Patterns.Utilities.ServiceLocator">
      <summary>
            A basic service locator used by PostSharp Patterns to find global services.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Utilities.ServiceLocator.GetService``1">
      <summary>
            Gets a service implementation.
            </summary>
      <typeparam name="T">Type of the requested service interface.</typeparam>
      <returns>An implementation of <typeparamref name="T" />, or <c>null</c> if no such service has been registered.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Utilities.ServiceLocator.RegisterService``1(``0)">
      <summary>
            Registers a service.
            </summary>
      <param name="service">Service implementation.</param>
      <typeparam name="T">Type of the service interface.</typeparam>
    </member>
    <member name="E:PostSharp.Patterns.Utilities.ServiceLocator.ServiceRegistered">
      <summary>
            Event raised when a new service is registered.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Utilities.ServiceRegisteredEventArgs">
      <summary>
            Arguments of the <see cref="E:PostSharp.Patterns.Utilities.ServiceLocator.ServiceRegistered" /> event.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Utilities.ServiceRegisteredEventArgs.ServiceType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the service interface.
            </summary>
    </member>
  </members>
</doc>